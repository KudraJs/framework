import figlet from "figlet";
import jetpack from "fs-jetpack";
import _ from "lodash";
import {
  CodeBlockWriter,
  OptionalKind,
  Project,
  SourceFile,
  SourceFileCreateOptions,
  VariableDeclarationStructure,
} from "ts-morph";
import webpack from "webpack";
import { Kudra } from "../kudra";
import { Resolver } from "../resolver";

export interface GlobalDeclaration {
  webpackDefinePlugin?: webpack.DefinePlugin.CodeValueObject;
  typeDeclaration: OptionalKind<VariableDeclarationStructure>;
}

export class TypeWriter {
  private project: Project;
  private resolver: Resolver;
  public readonly globalDeclarations: GlobalDeclaration[] = [];

  constructor(kudra: Kudra) {
    this.resolver = kudra.resolver;
    this.project = new Project();
  }

  /**
   * Given a relative path to a .d.ts file inside the outputDir, the method will return a ts-moprh SourceFile.
   * If the file already exists it's contents will be overwritten by default. You can change this behavior by passing
   * the overwrite option as false.
   *
   * @param filePath Relative path to a .d.ts file inside the outputDir
   * @param options ts-morph SourceFileCreateOptions
   */
  public createSourceFile(
    filePath: string,
    options?: SourceFileCreateOptions & { disclaimerComment?: boolean }
  ): SourceFile {
    const mergedOptions = Object.assign(
      {
        overwrite: true,
        disclaimerComment: true,
      },
      options
    );
    const sourceFilePath = this.resolver.resolveDTS(filePath);
    const srcFile = this.project.createSourceFile(sourceFilePath, "", mergedOptions);
    if (mergedOptions.disclaimerComment) {
      // const writerFunction: WriterFunction =
      srcFile.addStatements([(writer) => this.disclaimerComment(writer)]);
    }
    return srcFile;
  }

  public disclaimerComment(writer: CodeBlockWriter): CodeBlockWriter {
    writer
      .write("/*")
      .newLine()
      .write(
        figlet.textSync("Kudra", {
          horizontalLayout: "default",
          verticalLayout: "default",
          width: 80,
          whitespaceBreak: true,
        })
      )
      .newLine()
      .indent()
      .write("This file was auto-generated by kudra")
      .newLine()
      .indent(1)
      .write("Do not make changes to this file because its contents will be overwritten.")
      .newLine()
      .newLine()
      .closeComment();
    return writer;
  }

  /**
   * Adds a global type declaration to the global.d.ts. Additionally, you can pass a runtime value to the method
   * which will be made available throughout the app via webpack's DefinePlugin.
   *
   * @param globalDeclaration The global declaration to add to the global.d.ts
   * @param runtimeValue The value to make available to the app via webpack's DefinePlugin
   */
  public addGlobalDeclaration(typeDeclaration: OptionalKind<VariableDeclarationStructure>, runtimeValue?: any): void {
    const globalDeclaration: GlobalDeclaration = {
      typeDeclaration,
    };
    if (runtimeValue) {
      globalDeclaration.webpackDefinePlugin = {
        [typeDeclaration.name]: runtimeValue,
      };
    }
    this.globalDeclarations.push(globalDeclaration);
  }

  /**
   * Creates a template source file in the kudra output directory.
   * @param templateFilePath The path to the template file
   * @param outputFilePath The relative path to a .d.ts file inside the kudra outputDir
   * @param options The options to pass to the template when compiling it with lodash
   */
  public createTemplateFile(
    templateFilePath: string,
    outputFilePath: string,
    options: object,
    disclaimerComment = true
  ) {
    const template = jetpack.read(templateFilePath);

    if (!template) {
      throw new Error(`Could not find template file at ${templateFilePath}`);
    }

    // Generate the disclaimer comment text
    const writer = new CodeBlockWriter();
    const disclaimerText = disclaimerComment ? `${this.disclaimerComment(writer).toString()}\n` : "";

    // Compile the template into text
    const compiledTemplate = _.template(template)({
      ...options,
    });

    // Combine the disclaimer comment and the compiled template
    const outputText = `${disclaimerText}${compiledTemplate}`;

    // Write the output text to the output file
    const outputDTSPath = this.resolver.resolveDTS(outputFilePath);
    jetpack.write(outputDTSPath, outputText);
  }
}
