import figlet from "figlet";
import { OptionalKind, Project, SourceFile, SourceFileCreateOptions, VariableDeclarationStructure, WriterFunction } from "ts-morph";
import webpack from "webpack";
import { Kudra } from "../kudra";
import { Resolver } from "../resolver";

export interface GlobalDeclaration {
  webpackDefinePlugin?: webpack.DefinePlugin.CodeValueObject;
  typeDeclaration: OptionalKind<VariableDeclarationStructure>;
}

export class TypeWriter {
  private project: Project;
  private resolver: Resolver;
  private kudra: Kudra;
  public readonly globalDeclarations: GlobalDeclaration[] = [];

  constructor(kudra: Kudra) {
    this.kudra = kudra;
    this.resolver = kudra.resolver;
    this.project = new Project();
  }

  /**
   * Given a relative path to a .d.ts file inside the outputDir, the method will return a ts-moprh SourceFile.
   * If the file already exists it's contents will be overwritten by default. You can change this behavior by passing
   * the overwrite option as false.
   *
   * @param filePath Relative path to a .d.ts file inside the outputDir
   * @param options ts-morph SourceFileCreateOptions
   */
  public createSourceFile(filePath: string, options?: SourceFileCreateOptions & { disclaimerComment?: boolean }): SourceFile {
    const mergedOptions = Object.assign(
      {
        overwrite: true,
        disclaimerComment: true,
      },
      options
    );
    const sourceFilePath = this.resolver.resolveDTS(filePath);
    const srcFile = this.project.createSourceFile(sourceFilePath, "", mergedOptions);
    if (mergedOptions.disclaimerComment) srcFile.addStatements([this.disclaimerComment()]);
    return srcFile;
  }

  /** Generates a kudra disclaimer comment */
  public disclaimerComment(): WriterFunction {
    return (writer) => {
      const kudraText = figlet.textSync("Kudra", {
        horizontalLayout: "default",
        verticalLayout: "default",
        width: 80,
        whitespaceBreak: true,
      });

      writer
        .write("/*")
        .newLine()
        .write(kudraText)
        .newLine()
        .indent()
        .write("This file was auto-generated by kudra")
        .newLine()
        .indent(1)
        .write("Do not make changes to this file because its contents will be overwritten.")
        .newLine()
        .newLine()
        .closeComment();
    };
  }

  /**
   * Adds a global type declaration to the global.d.ts. Additionally, you can pass a runtime value to the method
   * which will be made available throughout the app via webpack's DefinePlugin.
   *
   * @param globalDeclaration The global declaration to add to the global.d.ts
   * @param runtimeValue The value to make available to the app via webpack's DefinePlugin
   */
  public addGlobalDeclaration(typeDeclaration: OptionalKind<VariableDeclarationStructure>, runtimeValue?: any): void {
    const globalDeclaration: GlobalDeclaration = {
      typeDeclaration,
    };
    if (runtimeValue) {
      globalDeclaration.webpackDefinePlugin = {
        [typeDeclaration.name]: runtimeValue,
      };
    }
    this.globalDeclarations.push(globalDeclaration);
  }
}
